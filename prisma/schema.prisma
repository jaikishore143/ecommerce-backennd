generator client {
  provider = "prisma-client-js"
}

generator seeder {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  firstName     String?
  lastName      String?
  avatar        String?
  googleId      String?        @unique
  role          Role           @default(CUSTOMER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshToken  String?
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  image         String?
  slug          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String
  slug       String    @unique
  categoryId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model Product {
  id             String          @id @default(uuid())
  name           String
  description    String
  price          Float
  salePrice      Float?
  stock          Int             @default(0)
  categoryId     String
  subcategoryId  String?
  brand          String?
  rating         Float           @default(0)
  reviewCount    Int             @default(0)
  isNew          Boolean         @default(false)
  isFeatured     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  cartItems      CartItem[]
  orderItems     OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?    @relation(fields: [subcategoryId], references: [id])
  images         ProductImage[]
  productTags    ProductTag[]
  reviews        Review[]
  specifications Specification[]
  wishlistItems  WishlistItem[]

  @@index([categoryId])
  @@index([subcategoryId])
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  productTags ProductTag[]
}

model ProductTag {
  productId String
  tagId     String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@index([productId])
  @@index([tagId])
}

model Specification {
  id        String   @id @default(uuid())
  key       String
  value     String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id                String        @id @default(uuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  subtotal          Float
  tax               Float
  shipping          Float
  total             Float
  shippingAddressId String?
  paymentMethod     String?
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  shippingAddress   Address?      @relation(fields: [shippingAddressId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]

  @@index([userId])
  @@index([shippingAddressId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  name      String
  price     Float
  salePrice Float?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      String?
  firstName    String
  lastName     String
  type         String   @default("SHIPPING")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@index([userId])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

enum Role {
  ADMIN
  CUSTOMER
  MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
